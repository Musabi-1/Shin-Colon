//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/StageControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StageControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StageControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StageControls"",
    ""maps"": [
        {
            ""name"": ""MainStage"",
            ""id"": ""d24c0ba2-158f-44c5-811d-2f621b926de3"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""2acdcf86-b3f1-45c1-838c-42b8f3088625"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26c3a2c4-2697-4bf2-9675-c228deab9a49"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainStage
        m_MainStage = asset.FindActionMap("MainStage", throwIfNotFound: true);
        m_MainStage_Touch = m_MainStage.FindAction("Touch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainStage
    private readonly InputActionMap m_MainStage;
    private List<IMainStageActions> m_MainStageActionsCallbackInterfaces = new List<IMainStageActions>();
    private readonly InputAction m_MainStage_Touch;
    public struct MainStageActions
    {
        private @StageControls m_Wrapper;
        public MainStageActions(@StageControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_MainStage_Touch;
        public InputActionMap Get() { return m_Wrapper.m_MainStage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainStageActions set) { return set.Get(); }
        public void AddCallbacks(IMainStageActions instance)
        {
            if (instance == null || m_Wrapper.m_MainStageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainStageActionsCallbackInterfaces.Add(instance);
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
        }

        private void UnregisterCallbacks(IMainStageActions instance)
        {
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
        }

        public void RemoveCallbacks(IMainStageActions instance)
        {
            if (m_Wrapper.m_MainStageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainStageActions instance)
        {
            foreach (var item in m_Wrapper.m_MainStageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainStageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainStageActions @MainStage => new MainStageActions(this);
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IMainStageActions
    {
        void OnTouch(InputAction.CallbackContext context);
    }
}
